== Emailvision Gem

Emailvision is a REST API wrapper interacting with Emailvision. It :

* Has a very comfortable syntax (ruby style);
* Uses the "lazy loading" pattern;
* Support further changes on Emailvision API (dynamic call);

=== Credentials

Credentials can be set in the environment.rb file like this:
* EMV_LOGIN = ""
* EMV_PASSWORD = ""
* EMV_KEY = ""

Or when you instance your object like this:
emv = Emailvision::Api.new "login", "password", "key", "endpoint"

=== Endpoints

Endpoints available :

* apiccmd (segment, campaign, message, ...)
* apitransactional (transactional message)
* apimember (member list)

=== Method calling

Method list can be found @ http://{server_name}/{endpoint}/services/rest?_wadl&_type=xml

==== Example #1

<b>Method to call</b>

<resource path="campaign/last/">
	<method name="GET">
		<request>
			<param name="token" style="query" type="xs:string"/>
			<param name="limit" style="query" type="xs:int"/>
		</request>
		<response>
			<representation mediaType="application/xml"/>
		</response>
	</method>
</resource>

<b>Summary</b>

* Endpoint : apiccmd
* Name : campaign/last
* Method : GET
* Parameters : token, limit

<b>Method calling syntax</b>

* emv = Emailvision::Api.new "login", "password", "key", "apiccmd"
* emv.get.campaign.last(:limit => 5).call

<b>Explanation</b>
* <b>get</b> is the HTTP verb
* <b>campaign.last</b> is the method name
* <b>(:limit => 5)</b> is the parameters. token is automatically given
* <b>call</b> is the keyword to perform the API call

=== Helpers

Some often-used methods has been implemented

* <b>emv.login</b> Login to given endpoint
* <b>emv.logout</b> Logout from given endpoint
* <b>emv.logged_in?</b> Check connection status

